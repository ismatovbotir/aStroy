<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\telegram;
use App\Models\Request as RequestMessages;
use App\Models\RequestItem;
use Illuminate\Support\Facades\Http;


class TelegramController extends Controller
{
    public function webhook(Request $request)
    {
        $data = $request->all();
        $this->sendMessage('1936361', $data['message']['text'] . ":" . $data['message']['from']['id']);

        // 1. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $chatId = $data['message']['from']['id'] ?? null;
        $text = $data['message']['text'] ?? '';
        $contact = $data['message']['contact'] ?? null;

        if (!$chatId) return response('No chat ID', 200);

        // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
        if ($text === '/start') {
            $this->start($chatId);
            return response('ok', 200);
        }

        // 3. –ö–æ–Ω—Ç–∞–∫—Ç (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
        if ($contact) {
            return $this->contact($chatId, $contact);
        }

        // 4. –ù–∞–∂–∞—Ç–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
        if ($text === 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É') {
            return $this->startRequest($chatId);
        }

        // 5. –ù–∞–∂–∞—Ç–∞ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É"
        if ($text === '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É') {
            return $this->finishRequest($chatId);
        }

        // 6. –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return $this->message($chatId, $text);
    }
    private function sendMessage($chatId, $text, $replyMarkup = null)
    {
        $token = env('TELEGRAM_BOT_TOKEN');
        $url = "https://api.telegram.org/bot{$token}/sendMessage";

        $payload = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ];

        if ($replyMarkup) {
            $payload['reply_markup'] = json_encode($replyMarkup);
        }

        Http::post($url, $payload);
        return response('ok');
    }

    public function start($chatId)
    {
        $user = telegram::firstOrCreate(
            ['id' => $chatId],
            ['status' => 'pending']
        );

        $text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.";
        $keyboard = [
            'keyboard' => [
                [[
                    'text' => 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                    'request_contact' => true
                ]]
            ],
            'resize_keyboard' => true,
            'one_time_keyboard' => true
        ];

        $this->sendMessage($chatId, $text, $keyboard);

        return response('ok');
    }

    public function startRequest($chatId)
    {
        $user = telegram::where("id", $chatId)->first();
        if (!$user) {
            return response('User not found', 200);
        }

        $text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É.";
        $keyboard = [
            'keyboard' => [
                [['text' => '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É']]
            ],
            'resize_keyboard' => true
        ];

        $this->sendMessage($chatId, $text, $keyboard);

        return response('ok');
    }

    public function finishRequest($chatId)
    {
        $user = telegram::find($chatId);
        if (!$user) {
            return response('ok', 200);
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $requestItems = RequestItem::where('telegram_id', $chatId)->whereNull('request_id')->get();

        if ($requestItems->isEmpty()) {
            $this->sendMessage($chatId, "–£ –≤–∞—Å –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
            return response('ok', 200);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        $newOrder = RequestMessages::create([
            'telegram_id' => $chatId

        ]);
        RequestItem::where('telegram_id', $chatId)
            ->whereNull('request_id')
            ->update(['request_id' => $newOrder->id]);


        $text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! #" . $newOrder->id;
        $keyboard = [
            'keyboard' => [
                [['text' => 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É']]
            ],
            'resize_keyboard' => true
        ];

        $this->sendMessage($chatId, $text, $keyboard);

        return response('ok', 200);
    }

    public function contact($chatId, $contact)
    {
        $user = telegram::find($chatId);
        if ($user) {
            $user->update([
                'phone' => $contact['phone_number'],


                'status' => 'approved',
            ]);
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
            $user = telegram::create([
                'id' => $chatId,
                'phone' => $contact['phone_number'],
                'status' => 'approved',
            ]);
        }

        $text = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ—Ä–∞–±. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.";
        $keyboard = [
            'keyboard' => [
                [['text' => 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É']]
            ],
            'resize_keyboard' => true
        ];

        $this->sendMessage($chatId, $text, $keyboard);
        return response('ok', 200);
    }

    public function message($chatId, $text)
    {
        $user = telegram::find($chatId);
        if (!$user) {
            //$this->sendMessage($chatId, "no user found");

            return response('ok', 200);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
            RequestItem::create([
                'telegram_id' => $chatId,
                'text' => $text,
            ]);
        } catch (\Exception $e) {
            $this->sendMessage($chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " . $e->getMessage());
            return response('ok', 200);
        }


        // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        //$this->sendMessage($chatId, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {$text}");

        return response('ok', 200);
    }
}
